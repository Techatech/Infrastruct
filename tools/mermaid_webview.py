import tkinter as tk
from tkinter import ttk
import tempfile
import webbrowser
import os
from urllib.parse import quote

class MermaidWebView:
    def __init__(self, parent_frame):
        self.parent_frame = parent_frame
        self.current_mermaid_code = ""
        self.temp_file = None
        
    def create_mermaid_html(self, mermaid_code: str, title: str = "Architecture Diagram") -> str:
        """Create HTML with embedded Mermaid diagram"""
        # Extract just the mermaid code without the markdown wrapper
        if "```mermaid" in mermaid_code:
            start = mermaid_code.find("```mermaid") + 10
            end = mermaid_code.find("```", start)
            clean_code = mermaid_code[start:end].strip()
        else:
            clean_code = mermaid_code.strip()
        
        html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <title>{title}</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background-color: #f8f9fa;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }}
        .header h1 {{
            color: #2c3e50;
            margin: 0;
            font-size: 2em;
        }}
        .diagram-container {{
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background: #ffffff;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        }}
        .controls {{
            text-align: center;
            margin: 20px 0;
        }}
        .btn {{
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 0 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }}
        .btn:hover {{
            background: #0056b3;
        }}
        .btn-secondary {{
            background: #6c757d;
        }}
        .btn-secondary:hover {{
            background: #545b62;
        }}
        .code-section {{
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 6px;
            border-left: 4px solid #007bff;
        }}
        .code-section h3 {{
            margin-top: 0;
            color: #495057;
        }}
        pre {{
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            border-radius: 4px;
            overflow-x: auto;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e9ecef;
            color: #6c757d;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üèóÔ∏è {title}</h1>
            <p>Interactive AWS Architecture Diagram</p>
        </div>
        
        <div class="diagram-container">
            <div class="mermaid" id="diagram">
{clean_code}
            </div>
        </div>
        
        <div class="controls">
            <button class="btn" onclick="downloadSVG()">üì• Download SVG</button>
            <button class="btn btn-secondary" onclick="copyCode()">üìã Copy Code</button>
            <button class="btn btn-secondary" onclick="openInMermaidLive()">üåê Open in Mermaid Live</button>
        </div>
        
        <div class="code-section">
            <h3>üìù Mermaid Code</h3>
            <pre id="mermaid-code">{clean_code}</pre>
        </div>
        
        <div class="footer">
            <p>Generated by AWS Infrastruct ‚Ä¢ Powered by Mermaid.js</p>
        </div>
    </div>

    <script>
        // Initialize Mermaid
        mermaid.initialize({{
            startOnLoad: true,
            theme: 'default',
            flowchart: {{
                useMaxWidth: true,
                htmlLabels: true,
                curve: 'basis'
            }},
            themeVariables: {{
                primaryColor: '#ff9900',
                primaryTextColor: '#232f3e',
                primaryBorderColor: '#232f3e',
                lineColor: '#232f3e',
                secondaryColor: '#f0f0f0',
                tertiaryColor: '#ffffff'
            }}
        }});

        // Function to download SVG
        function downloadSVG() {{
            const svg = document.querySelector('#diagram svg');
            if (svg) {{
                const svgData = new XMLSerializer().serializeToString(svg);
                const svgBlob = new Blob([svgData], {{type: 'image/svg+xml;charset=utf-8'}});
                const svgUrl = URL.createObjectURL(svgBlob);
                const downloadLink = document.createElement('a');
                downloadLink.href = svgUrl;
                downloadLink.download = 'architecture-diagram.svg';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
            }}
        }}

        // Function to copy code
        function copyCode() {{
            const code = document.getElementById('mermaid-code').textContent;
            navigator.clipboard.writeText(code).then(() => {{
                alert('Mermaid code copied to clipboard!');
            }});
        }}

        // Function to open in Mermaid Live
        function openInMermaidLive() {{
            const code = document.getElementById('mermaid-code').textContent;
            const encoded = btoa(JSON.stringify({{code: code, mermaid: {{theme: 'default'}}}}));
            window.open(`https://mermaid.live/edit#pako:${{encoded}}`, '_blank');
        }}

        // Auto-refresh diagram if needed
        setTimeout(() => {{
            mermaid.init();
        }}, 100);
    </script>
</body>
</html>"""
        return html_template
    
    def display_mermaid_diagram(self, mermaid_code: str, title: str = "Architecture Diagram"):
        """Display Mermaid diagram in webview or browser"""
        self.current_mermaid_code = mermaid_code
        
        # Create HTML content
        html_content = self.create_mermaid_html(mermaid_code, title)
        
        # Create temporary HTML file
        if self.temp_file:
            try:
                os.unlink(self.temp_file)
            except:
                pass
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write(html_content)
            self.temp_file = f.name
        
        return self.temp_file
    
    def create_webview_frame(self, parent):
        """Create a frame with webview controls"""
        webview_frame = ttk.Frame(parent)
        
        # Header with controls
        header_frame = ttk.Frame(webview_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(header_frame, text="üåê Interactive Mermaid Diagram", 
                 font=('Arial', 12, 'bold')).pack(side=tk.LEFT)
        
        # Control buttons
        btn_frame = ttk.Frame(header_frame)
        btn_frame.pack(side=tk.RIGHT)
        
        self.open_browser_btn = ttk.Button(btn_frame, text="üåê Open in Browser", 
                                          command=self.open_in_browser)
        self.open_browser_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.refresh_btn = ttk.Button(btn_frame, text="üîÑ Refresh", 
                                     command=self.refresh_diagram)
        self.refresh_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.mermaid_live_btn = ttk.Button(btn_frame, text="üìù Edit Online", 
                                          command=self.open_mermaid_live)
        self.mermaid_live_btn.pack(side=tk.LEFT)
        
        # Status label
        self.status_label = ttk.Label(webview_frame, text="No diagram loaded", 
                                     foreground='gray', font=('Arial', 9))
        self.status_label.pack(fill=tk.X, pady=(0, 10))
        
        # Placeholder for diagram (will show instructions)
        self.diagram_frame = ttk.Frame(webview_frame, relief='sunken', borderwidth=2)
        self.diagram_frame.pack(fill=tk.BOTH, expand=True)
        
        # Instructions
        instructions = ttk.Label(self.diagram_frame, 
                                text="üìä Interactive Mermaid diagrams will appear here\n\n"
                                     "üîÑ Generate a diagram from your architecture plan\n"
                                     "üåê Click 'Open in Browser' to view the interactive diagram\n"
                                     "üìù Click 'Edit Online' to modify the diagram in Mermaid Live\n\n"
                                     "Features:\n"
                                     "‚Ä¢ Interactive zoom and pan\n"
                                     "‚Ä¢ Download as SVG\n"
                                     "‚Ä¢ Copy Mermaid code\n"
                                     "‚Ä¢ Professional styling",
                                justify=tk.CENTER,
                                font=('Arial', 10))
        instructions.pack(expand=True)
        
        return webview_frame
    
    def open_in_browser(self):
        """Open the current diagram in the default browser"""
        if self.temp_file and os.path.exists(self.temp_file):
            webbrowser.open(f'file://{os.path.abspath(self.temp_file)}')
            self.status_label.config(text="‚úÖ Diagram opened in browser", foreground='green')
        else:
            self.status_label.config(text="‚ùå No diagram to display", foreground='red')
    
    def refresh_diagram(self):
        """Refresh the current diagram"""
        if self.current_mermaid_code:
            self.display_mermaid_diagram(self.current_mermaid_code)
            self.status_label.config(text="üîÑ Diagram refreshed", foreground='blue')
        else:
            self.status_label.config(text="‚ùå No diagram to refresh", foreground='red')
    
    def open_mermaid_live(self):
        """Open the current diagram in Mermaid Live editor"""
        if self.current_mermaid_code:
            # Extract clean mermaid code
            if "```mermaid" in self.current_mermaid_code:
                start = self.current_mermaid_code.find("```mermaid") + 10
                end = self.current_mermaid_code.find("```", start)
                clean_code = self.current_mermaid_code[start:end].strip()
            else:
                clean_code = self.current_mermaid_code.strip()
            
            # Encode for Mermaid Live
            import base64
            import json
            
            try:
                config = {"code": clean_code, "mermaid": {"theme": "default"}}
                encoded = base64.b64encode(json.dumps(config).encode()).decode()
                url = f"https://mermaid.live/edit#pako:{encoded}"
                webbrowser.open(url)
                self.status_label.config(text="üìù Opened in Mermaid Live editor", foreground='green')
            except Exception as e:
                # Fallback to simple URL
                encoded_code = quote(clean_code)
                url = f"https://mermaid.live/edit#{encoded_code}"
                webbrowser.open(url)
                self.status_label.config(text="üìù Opened in Mermaid Live editor", foreground='green')
        else:
            self.status_label.config(text="‚ùå No diagram to edit", foreground='red')
    
    def update_diagram(self, mermaid_code: str, title: str = "Architecture Diagram"):
        """Update the diagram with new Mermaid code"""
        html_file = self.display_mermaid_diagram(mermaid_code, title)
        self.status_label.config(text="‚úÖ Diagram ready - Click 'Open in Browser' to view", foreground='green')
        
        # Update instructions
        for widget in self.diagram_frame.winfo_children():
            widget.destroy()
        
        success_label = ttk.Label(self.diagram_frame,
                                 text="üéâ Interactive Mermaid Diagram Generated!\n\n"
                                      "üåê Click 'Open in Browser' to view the interactive diagram\n"
                                      "üìù Click 'Edit Online' to modify in Mermaid Live\n"
                                      "üîÑ Click 'Refresh' to regenerate\n\n"
                                      "The diagram includes:\n"
                                      "‚Ä¢ Interactive zoom and pan\n"
                                      "‚Ä¢ Download as SVG option\n"
                                      "‚Ä¢ Copy code functionality\n"
                                      "‚Ä¢ Professional AWS styling",
                                 justify=tk.CENTER,
                                 font=('Arial', 10),
                                 foreground='green')
        success_label.pack(expand=True)
        
        return html_file